---
description:
globs:
alwaysApply: false
---
# インフラストラクチャ層コーディング規約

インフラストラクチャ層は、外部システムとの連携やデータの永続化など、技術的な実装を担当します。

## リポジトリ実装

リポジトリの実装例:

```rust
pub struct SqlUserRepository {
    pool: PgPool,
}

impl SqlUserRepository {
    pub fn new(pool: PgPool) -> Self {
        Self { pool }
    }
}

#[async_trait]
impl UserRepository for SqlUserRepository {
    async fn find_by_id(&self, id: &str) -> Result<Option<User>, Error> {
        let result = sqlx::query_as!(
            UserRecord,
            "SELECT * FROM users WHERE id = $1",
            id
        )
        .fetch_optional(&self.pool)
        .await
        .context("ユーザー検索中にエラーが発生")?;

        Ok(result.map(|r| r.into()))
    }

    async fn save(&self, user: &User) -> Result<(), Error> {
        sqlx::query!(
            "INSERT INTO users (id, name, email, created_at, updated_at)
             VALUES ($1, $2, $3, $4, $5)
             ON CONFLICT (id) DO UPDATE
             SET name = $2, email = $3, updated_at = $5",
            user.id,
            user.name,
            user.email.value(),
            user.created_at,
            user.updated_at
        )
        .execute(&self.pool)
        .await
        .context("ユーザー保存中にエラーが発生")?;

        Ok(())
    }
}
```

## エラー処理

- `anyhow::Result`を使用
- エラーコンテキストの追加
- エラーの適切な変換と伝播

```rust
async fn fetch_data() -> Result<Data> {
    external_api_call()
        .await
        .context("外部APIの呼び出しに失敗")?
}
```

## データベースアクセス

- トランザクション管理の実装
- コネクションプールの適切な利用
- SQLインジェクション対策

## 外部サービス連携

- タイムアウト設定
- リトライ処理の実装
- サーキットブレーカーパターンの適用

## ロギング

- 構造化ログの使用
- 適切なログレベルの選択
- センシティブ情報の除外

```rust
// JSONログの設定
pub fn setup_json_logger() -> slog::Logger {
    let drain = slog_json::Json::new(std::io::stdout())
        .add_default_keys()
        .build()
        .fuse();
    let drain = slog_async::Async::new(drain).build().fuse();
    slog::Logger::root(drain, o!("version" => env!("CARGO_PKG_VERSION")))
}
```

