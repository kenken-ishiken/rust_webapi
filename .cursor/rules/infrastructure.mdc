---
description: 
globs: 
alwaysApply: true
---
# インフラストラクチャ層コーディング規約

## エラー処理

- `anyhow::Result`を使用
- エラーコンテキストの追加
- エラーの適切な変換と伝播

```rust
use anyhow::{Context, Result};

pub async fn fetch_data() -> Result<Data> {
    external_api_call()
        .await
        .context("外部APIの呼び出しに失敗")?
}
```

## データベースアクセス

- トランザクション管理の実装
- コネクションプールの適切な利用
- SQLインジェクション対策

```rust
#[async_trait]
impl UserRepository for SqlUserRepository {
    async fn find_by_id(&self, id: &str) -> Result<Option<User>> {
        let result = sqlx::query_as!(
            UserRecord,
            "SELECT * FROM users WHERE id = $1",
            id
        )
        .fetch_optional(&self.pool)
        .await
        .context("ユーザー検索中にエラーが発生")?;

        Ok(result.map(|r| r.into()))
    }
}
```

## 外部サービス連携

- タイムアウト設定
- リトライ処理の実装
- サーキットブレーカーパターンの適用

## キャッシュ戦略

- キャッシュの有効期限設定
- 分散キャッシュの考慮
- キャッシュの整合性管理

## ロギング

- 構造化ログの使用
- 適切なログレベルの選択
- センシティブ情報の除外

```rust
// JSONログの設定
pub fn setup_json_logger() -> slog::Logger {
    let drain = slog_json::Json::new(std::io::stdout())
        .add_default_keys()
        .build()
        .fuse();
    let drain = slog_async::Async::new(drain).build().fuse();
    slog::Logger::root(drain, o!("version" => env!("CARGO_PKG_VERSION")))
}

// tracingの設定
pub fn setup_tracing() {
    let fmt_layer = tracing_subscriber::fmt::layer()
        .with_target(true)
        .json();
    
    let env_filter = EnvFilter::try_from_default_env()
        .unwrap_or_else(|_| EnvFilter::new("info"));
    
    tracing_subscriber::registry()
        .with(fmt_layer)
        .with(env_filter)
        .init();
}
```

## 設定管理

- 環境変数の利用
- 設定ファイルの適切な構造化
- シークレット情報の安全な管理

```rust
// 設定の読み込み
pub fn load_config() -> Result<Config> {
    dotenv().ok();
    
    let database_url = env::var("DATABASE_URL")
        .context("DATABASE_URL環境変数が設定されていません")?;
    
    let keycloak_url = env::var("KEYCLOAK_URL")
        .context("KEYCLOAK_URL環境変数が設定されていません")?;
    
    Ok(Config {
        database_url,
        keycloak_url,
        // その他の設定
    })
}
```

## テスト

- モックの活用
- テスト用の設定分離
- インテグレーションテストの実装

## Observability（可観測性）

本プロジェクトは包括的な可観測性を実現するため、以下の機能を提供しています。

### ログ（Logs）

- `tracing` / `slog` による JSON 構造化ログ
- ログレベルの適切な使い分け
- リクエストIDやトレースIDによる相関付け

```rust
// リクエストログミドルウェア
pub fn request_logger() -> impl Fn(ServiceRequest) -> ... {
    tracing_actix_web::TracingLogger::new()
}
```

### メトリクス（Metrics）

- Prometheus エクスポート（`/metrics` エンドポイント）
- アプリケーションメトリクスの収集
- カスタムメトリクスの定義

```rust
// メトリクスの初期化
pub fn setup_metrics() -> PrometheusMetrics {
    let prometheus = PrometheusMetrics::new("api", Some("/metrics"), None);
    
    // カスタムメトリクスの登録
    let request_counter = prometheus
        .registry
        .register_counter("http_requests_total", "Total number of HTTP requests")
        .unwrap();
    
    prometheus
}
```

### トレーシング（Tracing）

- OpenTelemetry 対応（分散トレーシング）
- スパンの適切な設定
- 外部サービス呼び出しの追跡

```rust
// OpenTelemetryの設定
pub fn setup_opentelemetry() -> Result<()> {
    let tracer = opentelemetry_otlp::new_pipeline()
        .tracing()
        .with_exporter(opentelemetry_otlp::new_exporter().tonic())
        .install_batch(opentelemetry::runtime::Tokio)?;
    
    // tracingとOpenTelemetryの統合
    tracing_opentelemetry::layer().with_tracer(tracer);
    
    Ok(())
}
```

### ヘルスチェック

- ヘルスチェックエンドポイントの提供
- 依存サービスの状態確認
- 詳細なヘルスステータスの返却

```rust
#[get("/health")]
pub async fn health_check(
    data: web::Data<AppState>,
) -> Result<HttpResponse, Error> {
    // データベース接続確認
    let db_status = match data.db_pool.acquire().await {
        Ok(_) => "up",
        Err(_) => "down",
    };
    
    // 外部サービス確認
    let external_status = match check_external_service().await {
        Ok(_) => "up",
        Err(_) => "down",
    };
    
    Ok(HttpResponse::Ok().json(json!({
        "status": "ok",
        "version": env!("CARGO_PKG_VERSION"),
        "dependencies": {
            "database": db_status,
            "external_service": external_status
        }
    })))
}
```

詳細な可観測性の設計と実装ガイドは `o11y.md` を参照してください。
