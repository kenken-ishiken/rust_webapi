---
description: 
globs: 
alwaysApply: true
---
# 開発ワークフロー（TDD: テスト駆動開発）

本プロジェクトでは、テスト駆動開発（Test-Driven Development: TDD）のアプローチを採用しています。以下のワークフローに従って開発を進めてください。

## TDDサイクル（Red-Green-Refactor）

### 1. 要件分析・設計
新機能や修正を実装する前に、以下を明確にします：
- 実装する機能の要件
- 期待される動作
- エラーケース
- パフォーマンス要件

### 2. テスト作成（Red フェーズ）
要件を満たすテストを先に作成します。

```rust
#[test]
fn test_create_user_with_valid_data() {
    // Arrange
    let repository = MockUserRepository::new();
    repository.expect_save().times(1).returning(|_| Ok(()));
    let use_case = CreateUserUseCase::new(repository);
    let input = CreateUserInput {
        name: "太郎".to_string(),
        email: "taro@example.com".to_string(),
    };
    
    // Act
    let result = use_case.execute(input).await;
    
    // Assert
    assert!(result.is_ok());
    let user_id = result.unwrap();
    assert!(!user_id.is_empty());
}

#[test]
fn test_create_user_with_invalid_email() {
    // Arrange
    let repository = MockUserRepository::new();
    let use_case = CreateUserUseCase::new(repository);
    let input = CreateUserInput {
        name: "太郎".to_string(),
        email: "invalid-email".to_string(), // 無効なメール
    };
    
    // Act
    let result = use_case.execute(input).await;
    
    // Assert
    assert!(result.is_err());
    assert!(matches!(result.unwrap_err(), Error::InvalidEmail));
}
```

**重要**: この段階では、テストは失敗する必要があります（まだ実装していないため）。

### 3. テスト実行（失敗確認）
作成したテストを実行し、期待通りに失敗することを確認します。

```bash
cargo test test_create_user_with_valid_data
# テストが失敗することを確認
```

### 4. 最小限の実装（Green フェーズ）
テストが通るように、最小限のコードを実装します。

```rust
pub struct CreateUserUseCase<R: UserRepository> {
    repository: R,
}

impl<R: UserRepository> CreateUserUseCase<R> {
    pub fn new(repository: R) -> Self {
        Self { repository }
    }

    pub async fn execute(&self, input: CreateUserInput) -> Result<String, Error> {
        // 最小限の実装でテストを通す
        let email = Email::try_from(input.email)?;
        let user = User::new(
            Uuid::new_v4().to_string(),
            input.name,
            email,
        );
        
        self.repository.save(&user).await?;
        Ok(user.id)
    }
}
```

### 5. テスト実行（成功確認）
実装後、テストが成功することを確認します。

```bash
cargo test test_create_user_with_valid_data
# テストが成功することを確認
```

### 6. リファクタリング（Refactor フェーズ）
テストが通った状態で、コードの品質を向上させます：

- コードの重複を除去
- 可読性の向上
- パフォーマンスの最適化
- 設計の改善

```rust
impl<R: UserRepository> CreateUserUseCase<R> {
    pub async fn execute(&self, input: CreateUserInput) -> Result<String, Error> {
        // バリデーションの分離
        self.validate_input(&input)?;
        
        // ドメインオブジェクトの作成
        let user = self.create_user_from_input(input)?;
        
        // 永続化
        self.repository.save(&user).await?;
        
        Ok(user.id)
    }
    
    fn validate_input(&self, input: &CreateUserInput) -> Result<(), Error> {
        if input.name.trim().is_empty() {
            return Err(Error::InvalidUserName("名前は必須です".to_string()));
        }
        Ok(())
    }
    
    fn create_user_from_input(&self, input: CreateUserInput) -> Result<User, Error> {
        let email = Email::try_from(input.email)?;
        Ok(User::new(
            Uuid::new_v4().to_string(),
            input.name,
            email,
        ))
    }
}
```

### 7. 全テスト実行
リファクタリング後、すべてのテストが成功することを確認します。

```bash
cargo test
# すべてのテストが成功することを確認
```

### 8. 追加テストケース
必要に応じて、エッジケースや例外ケースのテストを追加します。

```rust
#[test]
fn test_create_user_with_empty_name() {
    // 空の名前でのテスト
}

#[test]
fn test_create_user_with_duplicate_email() {
    // 重複メールアドレスでのテスト
}

#[test]
fn test_create_user_repository_error() {
    // リポジトリエラーのテスト
}
```

## ワークフローの繰り返し

上記のサイクルを機能が完成するまで繰り返します：

1. **Red**: 新しいテストケースを追加（失敗）
2. **Green**: テストが通るように実装
3. **Refactor**: コードの改善
4. **テスト実行**: 全テストの成功確認

## ベストプラクティス

### テスト作成時
- **具体的なテスト名**: テストの目的が分かる名前を付ける
- **単一責任**: 1つのテストで1つの機能をテスト
- **独立性**: テスト間の依存関係を避ける
- **再現性**: 何度実行しても同じ結果になる

### 実装時
- **最小限の実装**: テストが通る最小限のコードから始める
- **段階的な改善**: 一度にすべてを実装しない
- **コミット頻度**: 小さな変更を頻繁にコミット

### リファクタリング時
- **テストの保護**: リファクタリング前後でテストが成功することを確認
- **小さな変更**: 一度に大きな変更をしない
- **意図の明確化**: コードの意図が分かりやすくなるように改善

## 統合テストの追加

機能が完成したら、統合テストも追加します：

```rust
#[actix_rt::test]
async fn test_create_user_integration() {
    // 実際のHTTPリクエストでのテスト
    let app = test::init_service(
        App::new()
            .app_data(web::Data::new(get_test_app_state().await))
            .service(create_user)
    ).await;
    
    let req = test::TestRequest::post()
        .uri("/api/users")
        .set_json(&json!({
            "name": "太郎",
            "email": "taro@example.com"
        }))
        .to_request();
    
    let resp = test::call_service(&app, req).await;
    assert_eq!(resp.status(), StatusCode::CREATED);
}
```

## 継続的改善

- **コードレビュー**: 他の開発者によるレビューを実施
- **カバレッジ測定**: テストカバレッジを定期的に確認
- **パフォーマンステスト**: 必要に応じてベンチマークテストを追加
- **ドキュメント更新**: 実装に合わせてドキュメントを更新

このワークフローに従うことで、品質の高いコードを効率的に開発できます。 