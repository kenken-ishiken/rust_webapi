---
description:
globs:
alwaysApply: false
---
# コードスタイル規約

## 基本フォーマット

- インデント: スペース4つ
- 行の最大長: 100文字
- ファイル末尾: 改行を含める

## 命名規則

- 変数・関数: `snake_case`
- 型・トレイト: `PascalCase`
- 定数: `SCREAMING_SNAKE_CASE`
- マクロ: `snake_case!`
- ファイル名: `snake_case.rs`

例:

```rust
const MAX_USERS: usize = 100;

pub struct UserRepository { /* ... */ }

pub trait DatabaseAccess { /* ... */ }

fn calculate_total_price(items: &[Item]) -> u64 {
    // ...
}

let user_count = get_active_users().len();
```

## インポート順序

```rust
// 1. 標準ライブラリ
use std::collections::HashMap;
use std::sync::Arc;

// 2. 外部クレート
use actix_web::{web, App, HttpResponse, HttpServer};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

// 3. 自クレート
use crate::application::UseCase;

// 4. 同一モジュール内
use self::repository::UserRepository;

// 5. 親モジュール
use super::domain::User;
```

## コードスタイル

- `match`式を`if let`より優先
- `impl Trait`を戻り値の型として優先
- ビルダーパターンを推奨
- 構造体更新構文を活用

### 良い例:

```rust
// match式の使用
match user_result {
    Ok(user) => process_user(user),
    Err(e) => log_error(e),
}

// impl Traitの使用
fn parse_config() -> impl Iterator<Item = ConfigEntry> {
    // ...
}

// 構造体更新構文
let updated_user = User {
    name: "新しい名前".to_string(),
    ..existing_user
};
```

### 避けるべき例:

```rust
// ifの連鎖よりmatchを使う
if let Ok(user) = user_result {
    process_user(user);
} else if let Err(e) = user_result {
    log_error(e);
}

// Box<dyn Trait>よりimpl Traitを使う
fn parse_config() -> Box<dyn Iterator<Item = ConfigEntry>> {
    // ...
}
```

## コメントスタイル

- ドキュメンテーションコメント: `///`
- モジュールドキュメント: `//!`
- コード内コメント: `//`

```rust
/// ユーザーを表す構造体
///
/// # 例
///
/// ```
/// let user = User::new("user1", "ユーザー1");
/// ```
pub struct User {
    // ...
}

// このコメントはコード内の説明用
let x = calculate_value(); // 行末コメント
```

## エラー処理

- パニックを避け、`Result`を返す
- エラーチェーンを維持
- エラーメッセージは具体的に

```rust
fn process_file(path: &str) -> Result<Data, Error> {
    let file = File::open(path)
        .context(format!("ファイルを開けません: {}", path))?;
    
    // 処理続行
}
```

