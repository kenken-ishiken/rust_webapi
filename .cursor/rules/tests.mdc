---
description:
globs:
alwaysApply: true
---
# テストコード規約

## テスト関数の命名

- プレフィックスとして`test_`を使用
- テストの目的が分かる名前を付ける
- snake_caseを使用

```rust
#[test]
fn test_create_user_success() {
    // テストの実装
}

#[test]
fn test_validate_email_invalid_format() {
    // テストの実装
}
```

## テスト構造

- Arrange-Act-Assert（AAA）パターンに従う
- 各セクションを明確に分ける
- テストの意図を明確にするコメントを追加

```rust
#[test]
fn test_create_item_success() {
    // Arrange
    let repository = MockItemRepository::new();
    repository.expect_save().times(1).returning(|_| Ok(()));
    let use_case = CreateItemUseCase::new(repository);
    let input = CreateItemInput {
        name: "テストアイテム".to_string(),
        price: 100,
    };
    
    // Act
    let result = use_case.execute(input);
    
    // Assert
    assert!(result.is_ok());
    let item_id = result.unwrap();
    assert!(!item_id.is_empty());
}
```

## モックの使用

- `mockall`クレートを使用
- 必要な振る舞いのみをモック
- 過度に詳細な検証を避ける

```rust
#[automock]
pub trait UserRepository: Send + Sync {
    async fn find_by_id(&self, id: &str) -> Result<Option<User>>;
    async fn save(&self, user: &User) -> Result<()>;
}

#[test]
fn test_with_mock() {
    let mut mock = MockUserRepository::new();
    mock.expect_find_by_id()
        .with(eq("user-1"))
        .times(1)
        .returning(|_| Ok(Some(User::new("user-1", "テスト", "test@example.com"))));
    
    // テストの実装
}
```

## 統合テスト

- `tests/`ディレクトリに配置
- 実際のデータベースやサービスとの連携をテスト
- テスト用の環境変数や設定を使用

```rust
#[actix_rt::test]
async fn test_create_user_integration() {
    // テスト用のアプリケーションを設定
    let app = test::init_service(
        App::new()
            .app_data(web::Data::new(get_test_app_state().await))
            .service(create_user)
    ).await;
    
    // リクエストを作成
    let req = test::TestRequest::post()
        .uri("/users")
        .set_json(&json!({
            "name": "テストユーザー",
            "email": "test@example.com"
        }))
        .to_request();
    
    // レスポンスを検証
    let resp = test::call_service(&app, req).await;
    assert_eq!(resp.status(), StatusCode::CREATED);
    
    // レスポンスボディを検証
    let body: CreateUserResponse = test::read_body_json(resp).await;
    assert!(!body.id.is_empty());
}
```

## カバレッジ測定

カバレッジ測定には`grcov`や`llvm-cov`を使用します。

```bash
# カバレッジ計測（要 llvm-tools-preview）
./scripts/coverage.sh
```

## テスト実行

```bash
# すべてのテストを実行
cargo test

# 特定のテストを実行
cargo test test_create_user

# 特定のモジュールのテストを実行
cargo test --package domain

# 統合テストのみ実行
cargo test --test '*'
```

## テストデータ

- テストデータは関数内で生成
- 共通のテストデータはヘルパー関数を使用
- 乱数を使用する場合は固定シードを設定

```rust
fn create_test_user() -> User {
    User::new(
        "test-user-id",
        "テストユーザー",
        "test@example.com",
    )
}
```

## アサーション

- 具体的なアサーションメッセージを提供
- 複雑な条件は複数のアサーションに分割
- カスタムアサーションヘルパーを活用

```rust
assert_eq!(user.name, "テストユーザー", "ユーザー名が一致しません");
assert!(user.email.contains('@'), "メールアドレスの形式が不正です");
