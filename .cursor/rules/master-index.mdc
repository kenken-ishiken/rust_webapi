---
description: 
globs: 
alwaysApply: false
---
# Rust WebAPI プロジェクト - Cursor Rules マスターインデックス

このドキュメントは、Rust WebAPIプロジェクトのすべてのCursor Rulesの統合インデックスです。各ルールファイルの目的と使用場面を明確にし、効率的な開発をサポートします。

## 📋 ルール概要

### 🏗️ プロジェクト構造・アーキテクチャ
- **[project-structure.mdc](mdc:project-structure.mdc)** - プロジェクト全体の構造、ファイル配置、技術スタック

### 💻 開発ガイドライン
- **[development-guidelines.mdc](mdc:development-guidelines.mdc)** - コーディング規約、ベストプラクティス、パフォーマンス最適化

### 🔌 API開発
- **[api-development.mdc](mdc:api-development.mdc)** - REST API・gRPC開発の具体的な実装パターン、テスト、デバッグ

### 🧪 テスト・品質管理
- **[testing-strategy.mdc](mdc:testing-strategy.mdc)** - TDD実践、テスト戦略、モック活用

## 🎯 使用場面別ガイド

### 新機能開発時
1. **[development-guidelines.mdc](mdc:development-guidelines.mdc)** - 開発の基本方針を確認
2. **[testing-strategy.mdc](mdc:testing-strategy.mdc)** - TDDサイクルでテスト作成
3. **[api-development.mdc](mdc:api-development.mdc)** - API実装

### バグ修正・デバッグ時
1. **[api-development.mdc](mdc:api-development.mdc)** - `curl`コマンドでAPI動作確認
2. **[testing-strategy.mdc](mdc:testing-strategy.mdc)** - 再現テスト作成
3. **[development-guidelines.mdc](mdc:development-guidelines.mdc)** - ログ・メトリクス確認方法を参照

### コードレビュー時
1. **[development-guidelines.mdc](mdc:development-guidelines.mdc)** - スタイル規約とベストプラクティスをチェック
2. **[testing-strategy.mdc](mdc:testing-strategy.mdc)** - テストの網羅性を確認
3. **[api-development.mdc](mdc:api-development.mdc)** - API設計原則を確認

### 新メンバーオンボーディング時
1. **[project-structure.mdc](mdc:project-structure.mdc)** - プロジェクト全体像を理解
2. **[development-guidelines.mdc](mdc:development-guidelines.mdc)** - 開発の進め方を把握
3. **[testing-strategy.mdc](mdc:testing-strategy.mdc)** - テスト方針を学ぶ

## 📁 ファイル参照マップ

### 主要設定ファイル
- **[Cargo.toml](mdc:Cargo.toml)** - プロジェクト設定・依存関係
- **[main.rs](mdc:src/main.rs)** - アプリケーションエントリポイント
- **[Dockerfile](mdc:Dockerfile)** - コンテナイメージ定義
- **[docker-compose.yml](mdc:docker-compose.yml)** - ローカル開発環境

### ドキュメント
- **[README.md](mdc:README.md)** - プロジェクト概要
- **[o11y.md](mdc:o11y.md)** - 可観測性ガイド
- **[CONTRIBUTING.md](mdc:CONTRIBUTING.md)** - コントリビューションガイド
- **[TESTING_IMPROVEMENTS.md](mdc:TESTING_IMPROVEMENTS.md)** - テスト改善ガイド

## 🔄 ルール更新フロー

### 新しいルールの追加
1. `.cursor/rules/` ディレクトリに `.mdc` ファイルを作成
2. このマスターインデックスに追加
3. 関連する既存ルールとの整合性を確認

### 既存ルールの更新
1. 該当ルールファイルを更新
2. 影響する他のルールファイルも確認・更新
3. マスターインデックスの説明も必要に応じて更新

## 🎨 ルール作成ガイドライン

### 内容構成
1. **目的・概要** - ルールの目的と適用範囲
2. **具体例** - 実装可能なコード例
3. **ベストプラクティス** - 推奨パターン
4. **アンチパターン** - 避けるべきパターン
5. **関連ファイル参照** - `[filename](mdc:filename)` 形式

### ファイル参照形式
```markdown
[filename.ext](mdc:filename.ext)
```

## 🚀 クイックスタート

### 開発開始時のチェックリスト
- [ ] **[project-structure.mdc](mdc:project-structure.mdc)** でプロジェクト構造を理解
- [ ] **[development-guidelines.mdc](mdc:development-guidelines.mdc)** でコーディング規約を確認
- [ ] **[testing-strategy.mdc](mdc:testing-strategy.mdc)** でTDDサイクルを理解

---

このマスターインデックスを起点として、効率的で一貫性のあるRust WebAPI開発を実現してください。各ルールファイルは相互に補完し合い、高品質なコードベースの維持をサポートします。
