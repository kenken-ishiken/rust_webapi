---
description: 
globs: 
alwaysApply: true
---
# ドメイン層コーディング規約

## ドメイン駆動設計（DDD）の原則

ドメイン層は、ビジネスロジックとエンティティを含む中核的な層です。以下の原則に従って設計・実装してください：

- **ユビキタス言語**：ドメインエキスパートと開発者間で共通の言語を使用
- **境界づけられたコンテキスト**：明確な境界を持つドメインモデルの定義
- **エンティティと値オブジェクト**：アイデンティティを持つエンティティと、属性のみの値オブジェクトを区別
- **集約**：関連するエンティティと値オブジェクトのクラスタ
- **リポジトリ**：集約のための永続化抽象化
- **ドメインサービス**：エンティティや値オブジェクトに属さない操作

## エンティティ定義

エンティティは以下の形式で定義します：

```rust
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct User {
    pub id: String,
    pub name: String,
    pub email: Email,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

impl User {
    pub fn new(id: String, name: String, email: Email) -> Self {
        let now = Utc::now();
        Self {
            id,
            name,
            email,
            created_at: now,
            updated_at: now,
        }
    }
    
    pub fn update_name(&mut self, name: String) {
        self.name = name;
        self.updated_at = Utc::now();
    }
    
    pub fn update_email(&mut self, email: Email) {
        self.email = email;
        self.updated_at = Utc::now();
    }
}
```

## 値オブジェクト

値オブジェクトは不変（イミュータブル）であり、等価性によって比較されます：

```rust
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Email(String);

impl TryFrom<String> for Email {
    type Error = Error;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        if !value.contains('@') {
            return Err(Error::InvalidEmail);
        }
        Ok(Self(value))
    }
}

impl Email {
    pub fn value(&self) -> &str {
        &self.0
    }
}
```

## ドメインイベント

ドメインイベントは、ドメイン内で発生した重要な出来事を表します：

```rust
#[derive(Debug, Clone)]
pub enum DomainEvent {
    UserCreated(UserCreatedEvent),
    UserUpdated(UserUpdatedEvent),
    ItemCreated(ItemCreatedEvent),
    // その他のイベント
}

#[derive(Debug, Clone)]
pub struct UserCreatedEvent {
    pub user_id: String,
    pub name: String,
    pub email: String,
    pub timestamp: DateTime<Utc>,
}
```

## リポジトリトレイト

リポジトリは、エンティティの永続化と取得を抽象化します：

```rust
#[async_trait]
pub trait UserRepository: Send + Sync {
    async fn find_by_id(&self, id: &str) -> Result<Option<User>, Error>;
    async fn find_by_email(&self, email: &Email) -> Result<Option<User>, Error>;
    async fn save(&self, user: &User) -> Result<(), Error>;
    async fn delete(&self, id: &str) -> Result<(), Error>;
    async fn find_all(&self) -> Result<Vec<User>, Error>;
}
```

## ドメインサービス

ドメインサービスは、単一のエンティティに属さない操作を提供します：

```rust
pub struct UserDomainService;

impl UserDomainService {
    pub fn is_email_unique(
        &self,
        email: &Email,
        repository: &impl UserRepository,
    ) -> Result<bool, Error> {
        let existing_user = repository.find_by_email(email).await?;
        Ok(existing_user.is_none())
    }
    
    pub fn authenticate_user(
        &self,
        email: &Email,
        password: &str,
        repository: &impl UserRepository,
    ) -> Result<Option<User>, Error> {
        // 認証ロジック
    }
}
```

## ドキュメンテーション

- すべての公開要素に`///`形式のドキュメンテーションコメントが必要
- モジュールレベルのドキュメントには`//!`を使用
- 複雑なビジネスロジックには説明コメントを追加

```rust
/// ユーザーエンティティ
///
/// システム内のユーザーを表します。
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct User {
    // フィールド
}

//! ユーザードメインモデル
//!
//! このモジュールはユーザー関連のエンティティと値オブジェクトを定義します。
```

## 命名規則

- エンティティ: PascalCase（例：`User`, `Item`）
- 値オブジェクト: PascalCase（例：`Email`, `Address`）
- メソッド: snake_case（例：`find_by_id`, `update_name`）
- 定数: SCREAMING_SNAKE_CASE（例：`MAX_USERNAME_LENGTH`）

## バリデーション

ドメインルールに基づくバリデーションを実装します：

```rust
impl User {
    pub fn validate(&self) -> Result<(), Error> {
        if self.name.is_empty() {
            return Err(Error::InvalidUserName("名前は空にできません".to_string()));
        }
        
        if self.name.len() > MAX_USERNAME_LENGTH {
            return Err(Error::InvalidUserName(format!(
                "名前は{}文字以下である必要があります", MAX_USERNAME_LENGTH
            )));
        }
        
        Ok(())
    }
}
```

## エラー処理

ドメイン固有のエラー型を定義します：

```rust
#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("無効なメールアドレス")]
    InvalidEmail,
    
    #[error("無効なユーザー名: {0}")]
    InvalidUserName(String),
    
    #[error("ユーザーが見つかりません: {0}")]
    UserNotFound(String),
    
    // その他のエラー
}
