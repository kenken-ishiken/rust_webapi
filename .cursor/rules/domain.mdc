---
description: 
globs: 
alwaysApply: true
---
# ドメイン層コーディング規約

## エンティティ定義

エンティティは以下の形式で定義します：

```rust
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct EntityName {
    pub id: String,
    // その他のフィールド
}

impl EntityName {
    pub fn new(id: String) -> Self {
        Self { id }
    }
}
```

## ドキュメンテーション

- すべての公開要素に`///`形式のドキュメンテーションコメントが必要
- モジュールレベルのドキュメントには`//!`を使用
- 複雑なビジネスロジックには説明コメントを追加

## 値オブジェクト

- イミュータブルな設計
- `Copy`トレイトの実装を推奨
- バリデーションは`TryFrom`トレイトで実装

```rust
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Email(String);

impl TryFrom<String> for Email {
    type Error = Error;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        if !value.contains('@') {
            return Err(Error::InvalidEmail);
        }
        Ok(Self(value))
    }
}
```

## リポジトリトレイト

```rust
#[async_trait]
pub trait Repository: Send + Sync {
    async fn find_by_id(&self, id: &str) -> Result<Option<Entity>, Error>;
    async fn save(&self, entity: &Entity) -> Result<(), Error>;
}
```

## 命名規則

- エンティティ: PascalCase
- メソッド: snake_case
- 定数: SCREAMING_SNAKE_CASE