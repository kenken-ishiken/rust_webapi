---
description:
globs:
alwaysApply: true
---
# Rust WebAPI プロジェクトガイド

このプロジェクトは、クラウドネイティブな実運用を想定したRust製REST APIサーバーです。学習用途から本番環境まで、Rustの高速な非同期処理と型安全性を活かしたAPI開発が可能です。

## プロジェクト構造

プロジェクトは以下のレイヤードアーキテクチャに従います：

```
.
├── src/                # メインアプリケーション
│   ├── main.rs         # エントリポイント
│   ├── application/    # アプリケーション層（DTO、サービス）
│   ├── domain/         # ドメイン層（モデル、リポジトリインターフェース）
│   ├── infrastructure/ # インフラ層（DB、認証、ロギング）
│   └── presentation/   # プレゼンテーション層（API ハンドラ）
├── crates/domain/      # ドメイン層サブクレート
├── k8s/                # Kubernetes マニフェスト
│   ├── base/           # 共通設定
│   └── overlays/       # 環境別設定（dev, staging, prod）
├── initdb/             # DB 初期化 SQL
├── scripts/            # 補助スクリプト
├── o11y.md             # 可観測性ガイド
├── Dockerfile          # コンテナイメージ定義
├── docker-compose.yml  # ローカル開発環境
└── README.md           # 本ドキュメント
```

## 主要な特徴

- **RESTful API**：CRUD 操作を HTTP/JSON で提供  
- **ドメイン駆動設計**：多層アーキテクチャ（domain, application, infrastructure, presentation）
- **高速**：`tokio` と `actix-web` による非同期 I/O  
- **型安全**：Rust の型システムでリクエスト／レスポンスを保証  
- **永続化**：`sqlx` による PostgreSQL 連携
- **認証**：JWT / Keycloak 連携
- **可観測性**：Prometheus / OpenTelemetry / Tracing 対応
- **コンテナ化**：Docker / Kubernetes / Istio 対応

## コーディング規約

### 共通規約

- インデント: スペース4つ
- 行の最大長: 100文字
- ファイル末尾: 改行を含める
- インポート順序: std → external → crate → self → super

### コードスタイル

- `match`式を`if let`より優先
- `impl Trait`を戻り値の型として優先
- ビルダーパターンを推奨
- 構造体更新構文を活用

## エラー処理

- 適切なエラー型の使用
- エラーメッセージは具体的に
- パニックを避け、`Result`を返す

## ドキュメンテーション

- パブリックAPIには必ずドキュメンテーションコメント
- 複雑なロジックには説明コメント
- モジュールレベルのドキュメント必須

## 実行方法

### ローカル実行（Rust のみ）
```bash
# 依存関係を取得してサーバーを起動
cargo run

# 別ターミナルで動作確認
curl http://127.0.0.1:8080/
```

### Docker Compose 実行（PostgreSQL 含む）
```bash
# 環境変数ファイル作成
cat > .env << EOF
DATABASE_URL=postgres://postgres:password@postgres:5432/rustwebapi
KEYCLOAK_URL=http://localhost:8081
KEYCLOAK_REALM=rust-webapi
KEYCLOAK_CLIENT_ID=api-client
EOF

# コンテナ起動
docker-compose up -d

# 動作確認
curl http://localhost:8080/
```

## テスト

```bash
# 単体テスト・統合テスト実行
cargo test

# カバレッジ計測（要 llvm-tools-preview）
./scripts/coverage.sh
```

## フォーマット & Lint

```bash
cargo fmt
cargo clippy --all-targets -- -D warnings
```

## Kubernetes デプロイ

本プロジェクトは Kubernetes / Istio 環境での本番運用を想定した設定を提供しています：

- **Namespace 分離**：API と Database の分離
- **Istio / Gateway API**：トラフィック制御
- **ConfigMap / Secret**：設定と機密情報の管理
- **HPA / PDB**：スケーリングと可用性確保
- **Kustomize**：環境別設定（dev, staging, prod）

詳細なデプロイ手順は `k8s/README.md` を参照してください。

## Observability（可観測性）

本プロジェクトは包括的な可観測性を実現するため、以下の機能を提供しています：

- **ログ**：`tracing` / `slog` による JSON 構造化ログ
- **メトリクス**：Prometheus エクスポート（`/metrics` エンドポイント）
- **トレーシング**：OpenTelemetry 対応（分散トレーシング）

詳細な可観測性の設計と実装ガイドは `o11y.md` を参照してください。

## コントリビューション

- コードスタイルは `rustfmt` と `clippy` に準拠
- 新機能には単体テストを追加
- コミットメッセージは具体的かつ簡潔に
- 大きな変更は事前に Issue で相談
