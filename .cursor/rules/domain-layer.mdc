---
description:
globs:
alwaysApply: false
---
# ドメイン層コーディング規約

ドメイン層は、ビジネスロジックとエンティティを含む中核的な層です。以下の原則に従って設計・実装してください：

## ドメインエンティティ

エンティティは以下の形式で定義します：

```rust
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct User {
    pub id: String,
    pub name: String,
    pub email: Email,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

impl User {
    pub fn new(id: String, name: String, email: Email) -> Self {
        let now = Utc::now();
        Self {
            id,
            name,
            email,
            created_at: now,
            updated_at: now,
        }
    }
    
    pub fn update_name(&mut self, name: String) {
        self.name = name;
        self.updated_at = Utc::now();
    }
}
```

## 値オブジェクト

値オブジェクトは不変（イミュータブル）であり、等価性によって比較されます：

```rust
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Email(String);

impl TryFrom<String> for Email {
    type Error = Error;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        if !value.contains('@') {
            return Err(Error::InvalidEmail);
        }
        Ok(Self(value))
    }
}

impl Email {
    pub fn value(&self) -> &str {
        &self.0
    }
}
```

## リポジトリトレイト

リポジトリは、エンティティの永続化と取得を抽象化します：

```rust
#[async_trait]
pub trait UserRepository: Send + Sync {
    async fn find_by_id(&self, id: &str) -> Result<Option<User>, Error>;
    async fn save(&self, user: &User) -> Result<(), Error>;
    async fn delete(&self, id: &str) -> Result<(), Error>;
}
```

## ドキュメンテーション

- すべての公開要素に`///`形式のドキュメンテーションコメントが必要
- モジュールレベルのドキュメントには`//!`を使用

